{"version":3,"sources":["containers/Blog/Tips/Tips.js","containers/Blog/List/List.js","containers/Blog/NewList/NewList.js","containers/Blog/Blog.js","App.js","serviceWorker.js","index.js"],"names":["Tips","className","Component","List","props","listItems","items","map","item","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","library","add","faTrash","NewList","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","console","log","forEach","deleteItems","filter","preventDefault","newItem","newItems","onSubmit","placeholder","Blog","to","pathname","hash","search","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0fd607a6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Tips.css';\r\n\r\nclass Tips extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"Tips\">\r\n                <h2>The Ultimate Guide</h2>\r\n                <h4><strong>\" Time is non-refundable, use it with intention.\"</strong></h4>\r\n                    <p>1. Timing is everything if you are \r\n                        really serious about getting more done</p>\r\n                    <p>2. Start your day with a full tank</p>\r\n                    <p>3. Separate your “today” list from your “master” list</p>\r\n                    <p>4. Manage your energy, not your time</p>\r\n                    <p>5. Build a “getting ready to work” routine</p>\r\n                    <p>6. Break up your work hours and take breaks</p>\r\n                    <p>7. Create a forced deadline</p>\r\n                    <p>8. Key takeaway</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Tips;","import React from 'react';\r\nimport './List.css';\r\nimport {FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nfunction List(props){\r\n    const items = props.items;\r\n    const listItems = items.map(item =>\r\n   {\r\n       return <div className=\"list\" key={item.key}>\r\n     <p>\r\n         <input type=\"text\" \r\n         id={item.key} \r\n         value={item.text} \r\n         onChange={(e)=>{\r\n             props.setUpdate(e.target.value , item.key)}}/>\r\n             <span>\r\n                <FontAwesomeIcon className=\"faicons\" \r\n                onClick={ () =>{ props.deleteItem(item.key) \r\n                }} icon=\"trash\"\r\n                />\r\n            </span>\r\n     </p>\r\n     </div>})\r\n     return <div>\r\n         {listItems}\r\n    </div>;\r\n  }\r\n\r\n  export default List;","import React, {Component} from 'react';\r\nimport './NewList.css';\r\nimport List from '../List/List';\r\nimport {library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nlibrary.add(faTrash);\r\n\r\nclass NewList extends Component{\r\n    constructor (props) {\r\n        super(props);\r\n        this.state={\r\n            items:[],\r\n            currentItem:{\r\n                text:'',\r\n                key:''\r\n            }\r\n        }\r\n        this.handleInput =this.handleInput.bind(this);\r\n        this.addItem =this.addItem.bind(this);\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.setUpdate = this.setUpdate.bind(this);\r\n    }\r\n\r\n    handleInput(e){\r\n        this.setState({\r\n            currentItem:{\r\n                text:e.target.value,\r\n                key:Date.now()\r\n            }\r\n        })\r\n    }\r\n    setUpdate(text,key){\r\n        console.log(\"items:\"+this.state.items);\r\n        const items = this.state.items;\r\n        items.forEach(item => {      \r\n          if(item.key===key){\r\n            console.log(item.key +\"    \"+key)\r\n            item.text= text;\r\n          }\r\n        })\r\n        this.setState({\r\n          items: items\r\n        })\r\n      }\r\n\r\n    deleteItem(key){\r\n        const deleteItems = this.state.items.filter(item =>\r\n            item.key!==key);\r\n            this.setState({\r\n                items: deleteItems\r\n            })\r\n    }\r\n\r\n    addItem(e){\r\n        e.preventDefault();\r\n        const newItem = this.state.currentItem;\r\n        if(newItem.text !== \"\"){\r\n            const newItems=[...this.state.items, newItem];\r\n            this.setState({\r\n                items: newItems,\r\n                currentItem:{\r\n                    text:'',\r\n                    key: ''\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"NewList\">\r\n                <h3>Heavily distracted by \"Social media\"...?</h3>\r\n                <p>Add Your Tasks</p>\r\n                <form id=\"form\"  onSubmit={this.addItem}>\r\n                    <input type=\"text\" placeholder=\"Enter Text\"\r\n                    value={this.state.currentItem.text}\r\n                    onChange={this.handleInput} />\r\n                    <button type=\"submit\">Add</button>\r\n                </form>\r\n                <p>{this.state.items.text}</p>\r\n                <List items={this.state.items}\r\n                deleteItem ={this.deleteItem}\r\n                setUpdate ={this.setUpdate}></List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default NewList;","import React, { Component } from 'react';\r\nimport { Route, Link} from 'react-router-dom';\r\nimport './Blog.css';\r\nimport Tips from './Tips/Tips';\r\nimport NewList from './NewList/NewList';\r\n\r\nclass Blog extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Blog\">\r\n                <header>\r\n                    <nav>\r\n                        <ul>\r\n                            <li><Link to=\"/\">Guide</Link></li>\r\n                            <li><Link to={{\r\n                                pathname: '/add-list',\r\n                                hash: '#submit',\r\n                                search: '?quick-submit=true'\r\n                            }}><button>Add List</button></Link> </li>\r\n                        </ul>\r\n                    </nav>\r\n                </header>\r\n                <Route path=\"/\" exact component={Tips} />\r\n                <Route path=\"/add-list\" component={NewList} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Blog;","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n      <Blog />\n    </div>\n    </BrowserRouter>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}